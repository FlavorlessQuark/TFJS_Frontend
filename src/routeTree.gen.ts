/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestingImport } from './routes/testing'
import { Route as ContainersIndexImport } from './routes/containers/index'
import { Route as CommunityIndexImport } from './routes/community/index'
import { Route as ContainersContainerIdImport } from './routes/containers/$containerId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TestingRoute = TestingImport.update({
  path: '/testing',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ContainersIndexRoute = ContainersIndexImport.update({
  path: '/containers/',
  getParentRoute: () => rootRoute,
} as any)

const CommunityIndexRoute = CommunityIndexImport.update({
  path: '/community/',
  getParentRoute: () => rootRoute,
} as any)

const ContainersContainerIdRoute = ContainersContainerIdImport.update({
  path: '/containers/$containerId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/testing': {
      id: '/testing'
      path: '/testing'
      fullPath: '/testing'
      preLoaderRoute: typeof TestingImport
      parentRoute: typeof rootRoute
    }
    '/containers/$containerId': {
      id: '/containers/$containerId'
      path: '/containers/$containerId'
      fullPath: '/containers/$containerId'
      preLoaderRoute: typeof ContainersContainerIdImport
      parentRoute: typeof rootRoute
    }
    '/community/': {
      id: '/community/'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityIndexImport
      parentRoute: typeof rootRoute
    }
    '/containers/': {
      id: '/containers/'
      path: '/containers'
      fullPath: '/containers'
      preLoaderRoute: typeof ContainersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  TestingRoute,
  ContainersContainerIdRoute,
  CommunityIndexRoute,
  ContainersIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/testing",
        "/containers/$containerId",
        "/community/",
        "/containers/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/testing": {
      "filePath": "testing.tsx"
    },
    "/containers/$containerId": {
      "filePath": "containers/$containerId.tsx"
    },
    "/community/": {
      "filePath": "community/index.tsx"
    },
    "/containers/": {
      "filePath": "containers/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
