[{"name":"elu","parameters":[{"name":"alpha","desc":"Float >= 0. Negative slope coefficient. Defaults to 1.0.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"leakyReLU","parameters":[{"name":"alpha","desc":"Float >= 0. Negative slope coefficient. Defaults to 0.3.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"prelu","parameters":[{"name":"alphaInitializer","desc":"Initializer for the learnable alpha.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"alphaRegularizer","desc":"Regularizer for the learnable alpha.","types":{"types":[],"options":[]}},{"name":"alphaConstraint","desc":"Constraint for the learnable alpha.","types":{"types":[],"options":[]}},{"name":"sharedAxes","desc":"The axes along which to share learnable parameters for the activation function. For example, if the incoming feature maps are from a 2D convolution with output shape [numExamples, height, width, channels], and you wish to share parameters across space (height and width) so that each filter channels has only one set of parameters, set shared_axes: [1, 2].","types":{"types":["[]","number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"reLU","parameters":[{"name":"maxValue","desc":"Float, the maximum output value.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"softmax","parameters":[{"name":"axis","desc":"Integer, axis along which the softmax normalization is applied. Defaults to -1 (i.e., the last axis).","types":{"types":["[]","number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"thresholdedReLU","parameters":[{"name":"theta","desc":"Float >= 0. Threshold location of activation.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"activation","parameters":[{"name":"activation","desc":"Name of the activation function to use.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"dense","parameters":[{"name":"units","desc":"Positive integer, dimensionality of the output space.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function to use. If unspecified, no activation is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether to apply a bias.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the dense kernel weights matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"inputDim","desc":"If specified, defines inputShape as [inputDim].","types":{"types":["number"],"options":[]}},{"name":"kernelConstraint","desc":"Constraint for the kernel weights.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint for the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the dense kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"dropout","parameters":[{"name":"rate","desc":"Float between 0 and 1. Fraction of the input units to drop.","types":{"types":["number"],"options":[]}},{"name":"noiseShape","desc":"Integer array representing the shape of the binary dropout mask that will be multiplied with the input. For instance, if your inputs have shape (batchSize, timesteps, features) and you want the dropout mask to be the same for all timesteps, you can use noise_shape=(batch_size, 1, features).","types":{"types":["[]","number"],"options":[]}},{"name":"seed","desc":"An integer to use as random seed.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"embedding","parameters":[{"name":"inputDim","desc":"Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.","types":{"types":["number"],"options":[]}},{"name":"outputDim","desc":"Integer >= 0. Dimension of the dense embedding.","types":{"types":["number"],"options":[]}},{"name":"embeddingsInitializer","desc":"Initializer for the embeddings matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"embeddingsRegularizer","desc":"Regularizer function applied to the embeddings matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"embeddingsConstraint","desc":"Constraint function applied to the embeddings matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"maskZero","desc":"Whether the input value 0 is a special \"padding\" value that should be masked out. This is useful when using recurrent layers which may take variable length input. If this is True then all subsequent layers in the model need to support masking or an exception will be raised. If maskZero is set to True, as a consequence, index 0 cannot be used in the vocabulary (inputDim should equal size of vocabulary + 1).","types":{"types":[],"options":[]}},{"name":"inputLength","desc":"Length of input sequences, when it is constant. This argument is required if you are going to connect flatten then dense layers upstream (without it, the shape of the dense outputs cannot be computed).","types":{"types":["[]","number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"flatten","parameters":[{"name":"dataFormat","desc":"Image data format: channelsLast (default) or channelsFirst.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"permute","parameters":[{"name":"dims","desc":"Array of integers. Permutation pattern. Does not include the sample (batch) dimension. Index starts at 1. For instance, [2, 1] permutes the first and second dimensions of the input.","types":{"types":["[]","number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"repeatVector","parameters":[{"name":"n","desc":"The integer number of times to repeat the input.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"reshape","parameters":[{"name":"targetShape","desc":"The target shape. Does not include the batch axis.","types":{"types":["[]","number","null"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"spatialDropout1d","parameters":[{"name":"rate","desc":"Float between 0 and 1. Fraction of the input units to drop.","types":{"types":["number"],"options":[]}},{"name":"seed","desc":"An integer to use as random seed.","types":{"types":["number"],"options":[]}},{"name":"input_shape","desc":"","types":{"types":["[]","number","null"],"options":[]}},{"name":"batch_input_shape","desc":"","types":{"types":["[]","number","null"],"options":[]}},{"name":"batch_size","desc":"","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"","types":{"types":[],"options":[]}},{"name":"input_dtype","desc":"","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"conv1d","parameters":[{"name":"filters","desc":"The dimensionality of the output space (i.e. the number of filters in the convolution).","types":{"types":["number"],"options":[]}},{"name":"kernelSize","desc":"The dimensions of the convolution window. If kernelSize is a number, the convolutional window will be square.","types":{"types":["[]","number"],"options":[]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function of the layer. If you don't specify the activation, none is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector. Defaults to true.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the convolutional kernel weights matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelConstraint","desc":"Constraint for the convolutional kernel weights.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint for the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"conv2d","parameters":[{"name":"filters","desc":"The dimensionality of the output space (i.e. the number of filters in the convolution).","types":{"types":["number"],"options":[]}},{"name":"kernelSize","desc":"The dimensions of the convolution window. If kernelSize is a number, the convolutional window will be square.","types":{"types":["[]","number"],"options":[]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function of the layer. If you don't specify the activation, none is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector. Defaults to true.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the convolutional kernel weights matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelConstraint","desc":"Constraint for the convolutional kernel weights.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint for the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"conv2dTranspose","parameters":[{"name":"filters","desc":"The dimensionality of the output space (i.e. the number of filters in the convolution).","types":{"types":["number"],"options":[]}},{"name":"kernelSize","desc":"The dimensions of the convolution window. If kernelSize is a number, the convolutional window will be square.","types":{"types":["[]","number"],"options":[]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function of the layer. If you don't specify the activation, none is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector. Defaults to true.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the convolutional kernel weights matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelConstraint","desc":"Constraint for the convolutional kernel weights.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint for the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"conv3d","parameters":[{"name":"filters","desc":"The dimensionality of the output space (i.e. the number of filters in the convolution).","types":{"types":["number"],"options":[]}},{"name":"kernelSize","desc":"The dimensions of the convolution window. If kernelSize is a number, the convolutional window will be square.","types":{"types":["[]","number"],"options":[]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function of the layer. If you don't specify the activation, none is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector. Defaults to true.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the convolutional kernel weights matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelConstraint","desc":"Constraint for the convolutional kernel weights.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint for the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"cropping2D","parameters":[{"name":"cropping","desc":"Dimension of the cropping along the width and the height. If integer: the same symmetric cropping is applied to width and height. If list of 2 integers: interpreted as two different symmetric cropping values for height and width: [symmetric_height_crop, symmetric_width_crop]. If a list of 2 lists of 2 integers: interpreted as [[top_crop, bottom_crop], [left_crop, right_crop]]","types":{"types":["number"],"options":[]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...) Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"depthwiseConv2d","parameters":[{"name":"kernelSize","desc":"An integer or Array of 2 integers, specifying the width and height of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.","types":{"types":["number"],"options":[]}},{"name":"depthMultiplier","desc":"The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to filtersIn * depthMultiplier. Default: 1.","types":{"types":["number"],"options":[]}},{"name":"depthwiseInitializer","desc":"Initializer for the depthwise kernel matrix. Default: GlorotNormal.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"depthwiseConstraint","desc":"Constraint for the depthwise kernel matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"depthwiseRegularizer","desc":"Regularizer function for the depthwise kernel matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function of the layer. If you don't specify the activation, none is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector. Defaults to true.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the convolutional kernel weights matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelConstraint","desc":"Constraint for the convolutional kernel weights.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint for the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"separableConv2d","parameters":[{"name":"depthMultiplier","desc":"The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to filtersIn * depthMultiplier. Default: 1.","types":{"types":["number"],"options":[]}},{"name":"depthwiseInitializer","desc":"Initializer for the depthwise kernel matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"pointwiseInitializer","desc":"Initializer for the pointwise kernel matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"depthwiseRegularizer","desc":"Regularizer function applied to the depthwise kernel matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"pointwiseRegularizer","desc":"Regularizer function applied to the pointwise kernel matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"depthwiseConstraint","desc":"Constraint function applied to the depthwise kernel matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"pointwiseConstraint","desc":"Constraint function applied to the pointwise kernel matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"filters","desc":"The dimensionality of the output space (i.e. the number of filters in the convolution).","types":{"types":["number"],"options":[]}},{"name":"kernelSize","desc":"The dimensions of the convolution window. If kernelSize is a number, the convolutional window will be square.","types":{"types":["[]","number"],"options":[]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function of the layer. If you don't specify the activation, none is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector. Defaults to true.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the convolutional kernel weights matrix.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelConstraint","desc":"Constraint for the convolutional kernel weights.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint for the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"activityRegularizer","desc":"Regularizer function applied to the activation.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"upSampling2d","parameters":[{"name":"size","desc":"The upsampling factors for rows and columns. Defaults to [2, 2].","types":{"types":["[]","number"],"options":[]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. \"channelsLast\" corresponds to inputs with shape [batch, ..., channels] \"channelsFirst\" corresponds to inputs with shape [batch, channels, ...]. Defaults to \"channelsLast\".","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"interpolation","desc":"The interpolation mechanism, one of \"nearest\" or \"bilinear\", default to \"nearest\".","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"add","parameters":[{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"average","parameters":[{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"concatenate","parameters":[{"name":"axis","desc":"Axis along which to concatenate.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"dot","parameters":[{"name":"axes","desc":"Axis or axes along which the dot product will be taken. Integer or an Array of integers.","types":{"types":["number"],"options":[]}},{"name":"normalize","desc":"Whether to L2-normalize samples along the dot product axis before taking the dot product. If set to true, the output of the dot product is the cosine proximity between the two samples.","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"maximum","parameters":[{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"minimum","parameters":[{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"multiply","parameters":[{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"batchNormalization","parameters":[{"name":"axis","desc":"The integer axis that should be normalized (typically the features axis). Defaults to -1. For instance, after a Conv2D layer with data_format=\"channels_first\", set axis=1 in batchNormalization.","types":{"types":["number"],"options":[]}},{"name":"momentum","desc":"Momentum of the moving average. Defaults to 0.99.","types":{"types":["number"],"options":[]}},{"name":"epsilon","desc":"Small float added to the variance to avoid dividing by zero. Defaults to 1e-3.","types":{"types":["number"],"options":[]}},{"name":"center","desc":"If true, add offset of beta to normalized tensor. If false, beta is ignored. Defaults to true.","types":{"types":[],"options":[]}},{"name":"scale","desc":"If true, multiply by gamma. If false, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer. Defaults to true.","types":{"types":[],"options":[]}},{"name":"betaInitializer","desc":"Initializer for the beta weight. Defaults to 'zeros'.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"gammaInitializer","desc":"Initializer for the gamma weight. Defaults to ones.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"movingMeanInitializer","desc":"Initializer for the moving mean. Defaults to zeros","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"movingVarianceInitializer","desc":"Initializer for the moving variance. Defaults to 'Ones'.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"betaConstraint","desc":"Constraint for the beta weight.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"gammaConstraint","desc":"Constraint for gamma weight.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"betaRegularizer","desc":"Regularizer for the beta weight.","types":{"types":["string"],"options":["l1l2"]}},{"name":"gammaRegularizer","desc":"Regularizer for the gamma weight.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"layerNormalization","parameters":[{"name":"axis","desc":"The axis or axes that should be normalized (typically, the feature axis). Defaults to -1 (the last axis).","types":{"types":["[]","number"],"options":[]}},{"name":"epsilon","desc":"A small positive float added to variance to avoid divison by zero. Defaults to 1e-3.","types":{"types":["number"],"options":[]}},{"name":"center","desc":"If true, add offset of beta to normalized tensor. If false, beta is ignored. Default: true.","types":{"types":[],"options":[]}},{"name":"scale","desc":"If true, multiply output by gamma. If false, gamma is not used. When the next layer is linear, this can be disabled since scaling will be done by the next layer. Default: true.","types":{"types":[],"options":[]}},{"name":"betaInitializer","desc":"Initializer for the beta weight. Default: 'zeros'.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"gammaInitializer","desc":"Initializer for the gamma weight. Default: 'ones'.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"betaRegularizer","desc":"Regularizer for the beta weight.","types":{"types":["string"],"options":["l1l2"]}},{"name":"gammaRegularizer","desc":"Regularizer for the gamma weight.","types":{"types":["string"],"options":["l1l2"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"averagePooling1d","parameters":[{"name":"poolSize","desc":"Size of the window to pool over, should be an integer.","types":{"types":["number"],"options":[]}},{"name":"strides","desc":"Period at which to sample the pooled values. If null, defaults to poolSize.","types":{"types":["number"],"options":[]}},{"name":"padding","desc":"How to fill in data that's not an integer multiple of poolSize.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"averagePooling2d","parameters":[{"name":"poolSize","desc":"Factors by which to downscale in each dimension [vertical, horizontal]. Expects an integer or an array of 2 integers. For example, [2, 2] will halve the input in both spatial dimensions. If only one integer is specified, the same window length will be used for both dimensions.","types":{"types":["number"],"options":[]}},{"name":"strides","desc":"The size of the stride in each dimension of the pooling window. Expects an integer or an array of 2 integers. Integer, tuple of 2 integers, or None. If null, defaults to poolSize.","types":{"types":["number"],"options":[]}},{"name":"padding","desc":"The padding type to use for the pooling layer.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"The data format to use for the pooling layer.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"averagePooling3d","parameters":[{"name":"poolSize","desc":"Factors by which to downscale in each dimension [depth, height, width]. Expects an integer or an array of 3 integers. For example, [2, 2, 2] will halve the input in three dimensions. If only one integer is specified, the same window length will be used for all dimensions.","types":{"types":["number"],"options":[]}},{"name":"strides","desc":"The size of the stride in each dimension of the pooling window. Expects an integer or an array of 3 integers. Integer, tuple of 3 integers, or None. If null, defaults to poolSize.","types":{"types":["number"],"options":[]}},{"name":"padding","desc":"The padding type to use for the pooling layer.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"The data format to use for the pooling layer.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"globalAveragePooling1d","parameters":[{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"globalAveragePooling2d","parameters":[{"name":"dataFormat","desc":"One of CHANNEL_LAST (default) or CHANNEL_FIRST. The ordering of the dimensions in the inputs. CHANNEL_LAST corresponds to inputs with shape [batch, height, width, channels] while CHANNEL_FIRST corresponds to inputs with shape [batch, channels, height, width].","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"globalMaxPooling1d","parameters":[{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"globalMaxPooling2d","parameters":[{"name":"dataFormat","desc":"One of CHANNEL_LAST (default) or CHANNEL_FIRST. The ordering of the dimensions in the inputs. CHANNEL_LAST corresponds to inputs with shape [batch, height, width, channels] while CHANNEL_FIRST corresponds to inputs with shape [batch, channels, height, width].","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"maxPooling1d","parameters":[{"name":"poolSize","desc":"Size of the window to pool over, should be an integer.","types":{"types":["number"],"options":[]}},{"name":"strides","desc":"Period at which to sample the pooled values. If null, defaults to poolSize.","types":{"types":["number"],"options":[]}},{"name":"padding","desc":"How to fill in data that's not an integer multiple of poolSize.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"maxPooling2d","parameters":[{"name":"poolSize","desc":"Factors by which to downscale in each dimension [vertical, horizontal]. Expects an integer or an array of 2 integers. For example, [2, 2] will halve the input in both spatial dimensions. If only one integer is specified, the same window length will be used for both dimensions.","types":{"types":["number"],"options":[]}},{"name":"strides","desc":"The size of the stride in each dimension of the pooling window. Expects an integer or an array of 2 integers. Integer, tuple of 2 integers, or None. If null, defaults to poolSize.","types":{"types":["number"],"options":[]}},{"name":"padding","desc":"The padding type to use for the pooling layer.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"The data format to use for the pooling layer.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"maxPooling3d","parameters":[{"name":"poolSize","desc":"Factors by which to downscale in each dimension [depth, height, width]. Expects an integer or an array of 3 integers. For example, [2, 2, 2] will halve the input in three dimensions. If only one integer is specified, the same window length will be used for all dimensions.","types":{"types":["number"],"options":[]}},{"name":"strides","desc":"The size of the stride in each dimension of the pooling window. Expects an integer or an array of 3 integers. Integer, tuple of 3 integers, or None. If null, defaults to poolSize.","types":{"types":["number"],"options":[]}},{"name":"padding","desc":"The padding type to use for the pooling layer.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"The data format to use for the pooling layer.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"convLstm2d","parameters":[{"name":"activation","desc":"Activation function to use. Defaults to hyperbolic tangent (tanh) If you pass null, no activation will be applied.","types":{"types":[],"options":[]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":[],"options":[]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":[],"options":[]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":[],"options":[]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":[],"options":[]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrentKernel weights matrix.","types":{"types":[],"options":[]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":[],"options":[]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":[],"options":[]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":[],"options":[]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":[],"options":[]}},{"name":"dropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":[],"options":[]}},{"name":"recurrentDropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":[],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":[],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":[],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":[],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":[],"options":[]}},{"name":"name","desc":"Name for this layer.","types":{"types":[],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":[],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":[],"options":[]}},{"name":"recurrentActivation","desc":"Activation function to use for the recurrent step. Defaults to hard sigmoid (hardSigmoid). If null, no activation is applied.","types":{"types":[],"options":[]}},{"name":"unitForgetBias","desc":"If true, add 1 to the bias of the forget gate at initialization. Setting it to true will also force biasInitializer = 'zeros'. This is recommended in Jozefowicz et al.","types":{"types":[],"options":[]}},{"name":"implementation","desc":"Implementation mode, either 1 or 2. Mode 1 will structure its operations as a larger number of smaller dot products and additions, whereas mode 2 will batch them into fewer, larger operations. These modes will have different performance profiles on different hardware and for different applications. Note: For superior performance, TensorFlow.js always uses implementation 2, regardless of the actual value of this config field.","types":{"types":[],"options":[]}},{"name":"returnSequences","desc":"Whether to return the last output in the output sequence, or the full sequence.","types":{"types":[],"options":[]}},{"name":"returnState","desc":"Whether to return the last state in addition to the output.","types":{"types":[],"options":[]}},{"name":"goBackwards","desc":"If true, process the input sequence backwards and return the reversed sequence (default: false).","types":{"types":[],"options":[]}},{"name":"stateful","desc":"If true, the last state for each sample at index i in a batch will be used as initial state of the sample of index i in the following batch (default: false). You can set RNN layers to be \"stateful\", which means that the states computed for the samples in one batch will be reused as initial states for the samples in the next batch. This assumes a one-to-one mapping between samples in different successive batches. To enable \"statefulness\": specify stateful: true in the layer constructor. specify a fixed batch size for your model, by passing if sequential model: batchInputShape: [...] to the first layer in your model. else for functional model with 1 or more Input layers: batchShape: [...] to all the first layers in your model. This is the expected shape of your inputs including the batch size. It should be a tuple of integers, e.g., [32, 10, 100]. specify shuffle: false when calling LayersModel.fit(). To reset the state of your model, call resetStates() on either the specific layer or on the entire model.","types":{"types":[],"options":[]}},{"name":"unroll","desc":"If true, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences (default: false). Porting Note: tfjs-layers has an imperative backend. RNNs are executed with normal TypeScript control flow. Hence this property is inapplicable and ignored in tfjs-layers.","types":{"types":[],"options":[]}},{"name":"inputDim","desc":"Dimensionality of the input (integer). This option (or alternatively, the option inputShape) is required when this layer is used as the first layer in a model.","types":{"types":[],"options":[]}},{"name":"inputLength","desc":"Length of the input sequences, to be specified when it is constant. This argument is required if you are going to connect Flatten then Dense layers upstream (without it, the shape of the dense outputs cannot be computed). Note that if the recurrent layer is not the first layer in your model, you would need to specify the input length at the level of the first layer (e.g., via the inputShape option).","types":{"types":[],"options":[]}},{"name":"cell","desc":"A RNN cell instance. A RNN cell is a class that has: a call() method, which takes [Tensor, Tensor] as the first input argument. The first item is the input at time t, and second item is the cell state at time t. The call() method returns [outputAtT, statesAtTPlus1]. The call() method of the cell can also take the argument constants, see section \"Note on passing external constants\" below. Porting Node: PyKeras overrides the call() signature of RNN cells, which are Layer subtypes, to accept two arguments. tfjs-layers does not do such overriding. Instead we preseve the call() signature, which due to its Tensor|Tensor[] argument and return value is flexible enough to handle the inputs and states. a stateSize attribute. This can be a single integer (single state) in which case it is the size of the recurrent state (which should be the same as the size of the cell output). This can also be an Array of integers (one size per state). In this case, the first entry (stateSize[0]) should be the same as the size of the cell output. It is also possible for cell to be a list of RNN cell instances, in which case the cells get stacked on after the other in the RNN, implementing an efficient stacked RNN.","types":{"types":["[]"],"options":[]}},{"name":"filters","desc":"The dimensionality of the output space (i.e. the number of filters in the convolution).","types":{"types":["number"],"options":[]}},{"name":"kernelSize","desc":"The dimensions of the convolution window. If kernelSize is a number, the convolutional window will be square.","types":{"types":["[]","number"],"options":[]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}}]},{"name":"convLstm2dCell","parameters":[{"name":"activation","desc":"Activation function to use. Default: hyperbolic tangent ('tanh'). If you pass null, 'linear' activation will be applied.","types":{"types":[],"options":[]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":[],"options":[]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":[],"options":[]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":[],"options":[]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":[],"options":[]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrent_kernel weights matrix.","types":{"types":[],"options":[]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":[],"options":[]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":[],"options":[]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":[],"options":[]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":[],"options":[]}},{"name":"dropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":[],"options":[]}},{"name":"recurrentDropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":[],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":[],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":[],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":[],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":[],"options":[]}},{"name":"name","desc":"Name for this layer.","types":{"types":[],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":[],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":[],"options":[]}},{"name":"recurrentActivation","desc":"Activation function to use for the recurrent step. Defaults to hard sigmoid (hardSigmoid). If null, no activation is applied.","types":{"types":[],"options":[]}},{"name":"unitForgetBias","desc":"If true, add 1 to the bias of the forget gate at initialization. Setting it to true will also force biasInitializer = 'zeros'. This is recommended in Jozefowicz et al.","types":{"types":[],"options":[]}},{"name":"implementation","desc":"Implementation mode, either 1 or 2. Mode 1 will structure its operations as a larger number of smaller dot products and additions. Mode 2 will batch them into fewer, larger operations. These modes will have different performance profiles on different hardware and for different applications. Note: For superior performance, TensorFlow.js always uses implementation 2, regardless of the actual value of this configuration field.","types":{"types":[],"options":[]}},{"name":"filters","desc":"The dimensionality of the output space (i.e. the number of filters in the convolution).","types":{"types":["number"],"options":[]}},{"name":"kernelSize","desc":"The dimensions of the convolution window. If kernelSize is a number, the convolutional window will be square.","types":{"types":["[]","number"],"options":[]}},{"name":"strides","desc":"The strides of the convolution in each dimension. If strides is a number, strides in both dimensions are equal. Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.","types":{"types":["[]","number"],"options":[]}},{"name":"padding","desc":"Padding mode.","types":{"types":["string"],"options":["valid","same","causal"]}},{"name":"dataFormat","desc":"Format of the data, which determines the ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch, ..., channels) channels_first corresponds to inputs with shape (batch, channels, ...). Defaults to channels_last.","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"dilationRate","desc":"The dilation rate to use for the dilated convolution in each dimension. Should be an integer or array of two or three integers. Currently, specifying any dilationRate value != 1 is incompatible with specifying any strides value != 1.","types":{"types":["number"],"options":[]}}]},{"name":"gru","parameters":[{"name":"recurrentActivation","desc":"Activation function to use for the recurrent step. Defaults to hard sigmoid (hardSigmoid). If null, no activation is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"implementation","desc":"Implementation mode, either 1 or 2. Mode 1 will structure its operations as a larger number of smaller dot products and additions. Mode 2 will batch them into fewer, larger operations. These modes will have different performance profiles on different hardware and for different applications. Note: For superior performance, TensorFlow.js always uses implementation 2, regardless of the actual value of this configuration field.","types":{"types":["number"],"options":[]}},{"name":"units","desc":"Positive integer, dimensionality of the output space.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function to use. Defaults to hyperbolic tangent (tanh) If you pass null, no activation will be applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"dropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":["number"],"options":[]}},{"name":"recurrentDropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":["number"],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"cell","desc":"A RNN cell instance. A RNN cell is a class that has: a call() method, which takes [Tensor, Tensor] as the first input argument. The first item is the input at time t, and second item is the cell state at time t. The call() method returns [outputAtT, statesAtTPlus1]. The call() method of the cell can also take the argument constants, see section \"Note on passing external constants\" below. Porting Node: PyKeras overrides the call() signature of RNN cells, which are Layer subtypes, to accept two arguments. tfjs-layers does not do such overriding. Instead we preseve the call() signature, which due to its Tensor|Tensor[] argument and return value is flexible enough to handle the inputs and states. a stateSize attribute. This can be a single integer (single state) in which case it is the size of the recurrent state (which should be the same as the size of the cell output). This can also be an Array of integers (one size per state). In this case, the first entry (stateSize[0]) should be the same as the size of the cell output. It is also possible for cell to be a list of RNN cell instances, in which case the cells get stacked on after the other in the RNN, implementing an efficient stacked RNN.","types":{"types":["[]"],"options":[]}},{"name":"returnSequences","desc":"Whether to return the last output in the output sequence, or the full sequence.","types":{"types":[],"options":[]}},{"name":"returnState","desc":"Whether to return the last state in addition to the output.","types":{"types":[],"options":[]}},{"name":"goBackwards","desc":"If true, process the input sequence backwards and return the reversed sequence (default: false).","types":{"types":[],"options":[]}},{"name":"stateful","desc":"If true, the last state for each sample at index i in a batch will be used as initial state of the sample of index i in the following batch (default: false). You can set RNN layers to be \"stateful\", which means that the states computed for the samples in one batch will be reused as initial states for the samples in the next batch. This assumes a one-to-one mapping between samples in different successive batches. To enable \"statefulness\": specify stateful: true in the layer constructor. specify a fixed batch size for your model, by passing if sequential model: batchInputShape: [...] to the first layer in your model. else for functional model with 1 or more Input layers: batchShape: [...] to all the first layers in your model. This is the expected shape of your inputs including the batch size. It should be a tuple of integers, e.g., [32, 10, 100]. specify shuffle: false when calling LayersModel.fit(). To reset the state of your model, call resetStates() on either the specific layer or on the entire model.","types":{"types":[],"options":[]}},{"name":"unroll","desc":"If true, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences (default: false). Porting Note: tfjs-layers has an imperative backend. RNNs are executed with normal TypeScript control flow. Hence this property is inapplicable and ignored in tfjs-layers.","types":{"types":[],"options":[]}},{"name":"inputDim","desc":"Dimensionality of the input (integer). This option (or alternatively, the option inputShape) is required when this layer is used as the first layer in a model.","types":{"types":["number"],"options":[]}},{"name":"inputLength","desc":"Length of the input sequences, to be specified when it is constant. This argument is required if you are going to connect Flatten then Dense layers upstream (without it, the shape of the dense outputs cannot be computed). Note that if the recurrent layer is not the first layer in your model, you would need to specify the input length at the level of the first layer (e.g., via the inputShape option).","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"gruCell","parameters":[{"name":"recurrentActivation","desc":"Activation function to use for the recurrent step. Defaults to hard sigmoid (hardSigmoid). If null, no activation is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"implementation","desc":"Implementation mode, either 1 or 2. Mode 1 will structure its operations as a larger number of smaller dot products and additions. Mode 2 will batch them into fewer, larger operations. These modes will have different performance profiles on different hardware and for different applications. Note: For superior performance, TensorFlow.js always uses implementation 2, regardless of the actual value of this configuration field.","types":{"types":["number"],"options":[]}},{"name":"resetAfter","desc":"GRU convention (whether to apply reset gate after or before matrix multiplication). false = \"before\", true = \"after\" (only false is supported).","types":{"types":[],"options":[]}},{"name":"units","desc":"units: Positive integer, dimensionality of the output space.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function to use. Default: hyperbolic tangent ('tanh'). If you pass null, 'linear' activation will be applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrent_kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"dropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":["number"],"options":[]}},{"name":"recurrentDropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":["number"],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"lstm","parameters":[{"name":"recurrentActivation","desc":"Activation function to use for the recurrent step. Defaults to hard sigmoid (hardSigmoid). If null, no activation is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"unitForgetBias","desc":"If true, add 1 to the bias of the forget gate at initialization. Setting it to true will also force biasInitializer = 'zeros'. This is recommended in Jozefowicz et al.","types":{"types":[],"options":[]}},{"name":"implementation","desc":"Implementation mode, either 1 or 2. Mode 1 will structure its operations as a larger number of smaller dot products and additions, whereas mode 2 will batch them into fewer, larger operations. These modes will have different performance profiles on different hardware and for different applications. Note: For superior performance, TensorFlow.js always uses implementation 2, regardless of the actual value of this config field.","types":{"types":["number"],"options":[]}},{"name":"units","desc":"Positive integer, dimensionality of the output space.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function to use. Defaults to hyperbolic tangent (tanh) If you pass null, no activation will be applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"dropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":["number"],"options":[]}},{"name":"recurrentDropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":["number"],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"cell","desc":"A RNN cell instance. A RNN cell is a class that has: a call() method, which takes [Tensor, Tensor] as the first input argument. The first item is the input at time t, and second item is the cell state at time t. The call() method returns [outputAtT, statesAtTPlus1]. The call() method of the cell can also take the argument constants, see section \"Note on passing external constants\" below. Porting Node: PyKeras overrides the call() signature of RNN cells, which are Layer subtypes, to accept two arguments. tfjs-layers does not do such overriding. Instead we preseve the call() signature, which due to its Tensor|Tensor[] argument and return value is flexible enough to handle the inputs and states. a stateSize attribute. This can be a single integer (single state) in which case it is the size of the recurrent state (which should be the same as the size of the cell output). This can also be an Array of integers (one size per state). In this case, the first entry (stateSize[0]) should be the same as the size of the cell output. It is also possible for cell to be a list of RNN cell instances, in which case the cells get stacked on after the other in the RNN, implementing an efficient stacked RNN.","types":{"types":["[]"],"options":[]}},{"name":"returnSequences","desc":"Whether to return the last output in the output sequence, or the full sequence.","types":{"types":[],"options":[]}},{"name":"returnState","desc":"Whether to return the last state in addition to the output.","types":{"types":[],"options":[]}},{"name":"goBackwards","desc":"If true, process the input sequence backwards and return the reversed sequence (default: false).","types":{"types":[],"options":[]}},{"name":"stateful","desc":"If true, the last state for each sample at index i in a batch will be used as initial state of the sample of index i in the following batch (default: false). You can set RNN layers to be \"stateful\", which means that the states computed for the samples in one batch will be reused as initial states for the samples in the next batch. This assumes a one-to-one mapping between samples in different successive batches. To enable \"statefulness\": specify stateful: true in the layer constructor. specify a fixed batch size for your model, by passing if sequential model: batchInputShape: [...] to the first layer in your model. else for functional model with 1 or more Input layers: batchShape: [...] to all the first layers in your model. This is the expected shape of your inputs including the batch size. It should be a tuple of integers, e.g., [32, 10, 100]. specify shuffle: false when calling LayersModel.fit(). To reset the state of your model, call resetStates() on either the specific layer or on the entire model.","types":{"types":[],"options":[]}},{"name":"unroll","desc":"If true, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences (default: false). Porting Note: tfjs-layers has an imperative backend. RNNs are executed with normal TypeScript control flow. Hence this property is inapplicable and ignored in tfjs-layers.","types":{"types":[],"options":[]}},{"name":"inputDim","desc":"Dimensionality of the input (integer). This option (or alternatively, the option inputShape) is required when this layer is used as the first layer in a model.","types":{"types":["number"],"options":[]}},{"name":"inputLength","desc":"Length of the input sequences, to be specified when it is constant. This argument is required if you are going to connect Flatten then Dense layers upstream (without it, the shape of the dense outputs cannot be computed). Note that if the recurrent layer is not the first layer in your model, you would need to specify the input length at the level of the first layer (e.g., via the inputShape option).","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"lstmCell","parameters":[{"name":"recurrentActivation","desc":"Activation function to use for the recurrent step. Defaults to hard sigmoid (hardSigmoid). If null, no activation is applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"unitForgetBias","desc":"If true, add 1 to the bias of the forget gate at initialization. Setting it to true will also force biasInitializer = 'zeros'. This is recommended in Jozefowicz et al.","types":{"types":[],"options":[]}},{"name":"implementation","desc":"Implementation mode, either 1 or 2. Mode 1 will structure its operations as a larger number of smaller dot products and additions. Mode 2 will batch them into fewer, larger operations. These modes will have different performance profiles on different hardware and for different applications. Note: For superior performance, TensorFlow.js always uses implementation 2, regardless of the actual value of this configuration field.","types":{"types":["number"],"options":[]}},{"name":"units","desc":"units: Positive integer, dimensionality of the output space.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function to use. Default: hyperbolic tangent ('tanh'). If you pass null, 'linear' activation will be applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrent_kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"dropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":["number"],"options":[]}},{"name":"recurrentDropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":["number"],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"rnn","parameters":[{"name":"cell","desc":"A RNN cell instance. A RNN cell is a class that has: a call() method, which takes [Tensor, Tensor] as the first input argument. The first item is the input at time t, and second item is the cell state at time t. The call() method returns [outputAtT, statesAtTPlus1]. The call() method of the cell can also take the argument constants, see section \"Note on passing external constants\" below. Porting Node: PyKeras overrides the call() signature of RNN cells, which are Layer subtypes, to accept two arguments. tfjs-layers does not do such overriding. Instead we preseve the call() signature, which due to its Tensor|Tensor[] argument and return value is flexible enough to handle the inputs and states. a stateSize attribute. This can be a single integer (single state) in which case it is the size of the recurrent state (which should be the same as the size of the cell output). This can also be an Array of integers (one size per state). In this case, the first entry (stateSize[0]) should be the same as the size of the cell output. It is also possible for cell to be a list of RNN cell instances, in which case the cells get stacked on after the other in the RNN, implementing an efficient stacked RNN.","types":{"types":["[]"],"options":[]}},{"name":"returnSequences","desc":"Whether to return the last output in the output sequence, or the full sequence.","types":{"types":[],"options":[]}},{"name":"returnState","desc":"Whether to return the last state in addition to the output.","types":{"types":[],"options":[]}},{"name":"goBackwards","desc":"If true, process the input sequence backwards and return the reversed sequence (default: false).","types":{"types":[],"options":[]}},{"name":"stateful","desc":"If true, the last state for each sample at index i in a batch will be used as initial state of the sample of index i in the following batch (default: false). You can set RNN layers to be \"stateful\", which means that the states computed for the samples in one batch will be reused as initial states for the samples in the next batch. This assumes a one-to-one mapping between samples in different successive batches. To enable \"statefulness\": specify stateful: true in the layer constructor. specify a fixed batch size for your model, by passing if sequential model: batchInputShape: [...] to the first layer in your model. else for functional model with 1 or more Input layers: batchShape: [...] to all the first layers in your model. This is the expected shape of your inputs including the batch size. It should be a tuple of integers, e.g., [32, 10, 100]. specify shuffle: false when calling LayersModel.fit(). To reset the state of your model, call resetStates() on either the specific layer or on the entire model.","types":{"types":[],"options":[]}},{"name":"unroll","desc":"If true, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences (default: false). Porting Note: tfjs-layers has an imperative backend. RNNs are executed with normal TypeScript control flow. Hence this property is inapplicable and ignored in tfjs-layers.","types":{"types":[],"options":[]}},{"name":"inputDim","desc":"Dimensionality of the input (integer). This option (or alternatively, the option inputShape) is required when this layer is used as the first layer in a model.","types":{"types":["number"],"options":[]}},{"name":"inputLength","desc":"Length of the input sequences, to be specified when it is constant. This argument is required if you are going to connect Flatten then Dense layers upstream (without it, the shape of the dense outputs cannot be computed). Note that if the recurrent layer is not the first layer in your model, you would need to specify the input length at the level of the first layer (e.g., via the inputShape option).","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"simpleRNN","parameters":[{"name":"units","desc":"Positive integer, dimensionality of the output space.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function to use. Defaults to hyperbolic tangent (tanh) If you pass null, no activation will be applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"dropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":["number"],"options":[]}},{"name":"recurrentDropout","desc":"Number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":["number"],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"cell","desc":"A RNN cell instance. A RNN cell is a class that has: a call() method, which takes [Tensor, Tensor] as the first input argument. The first item is the input at time t, and second item is the cell state at time t. The call() method returns [outputAtT, statesAtTPlus1]. The call() method of the cell can also take the argument constants, see section \"Note on passing external constants\" below. Porting Node: PyKeras overrides the call() signature of RNN cells, which are Layer subtypes, to accept two arguments. tfjs-layers does not do such overriding. Instead we preseve the call() signature, which due to its Tensor|Tensor[] argument and return value is flexible enough to handle the inputs and states. a stateSize attribute. This can be a single integer (single state) in which case it is the size of the recurrent state (which should be the same as the size of the cell output). This can also be an Array of integers (one size per state). In this case, the first entry (stateSize[0]) should be the same as the size of the cell output. It is also possible for cell to be a list of RNN cell instances, in which case the cells get stacked on after the other in the RNN, implementing an efficient stacked RNN.","types":{"types":["[]"],"options":[]}},{"name":"returnSequences","desc":"Whether to return the last output in the output sequence, or the full sequence.","types":{"types":[],"options":[]}},{"name":"returnState","desc":"Whether to return the last state in addition to the output.","types":{"types":[],"options":[]}},{"name":"goBackwards","desc":"If true, process the input sequence backwards and return the reversed sequence (default: false).","types":{"types":[],"options":[]}},{"name":"stateful","desc":"If true, the last state for each sample at index i in a batch will be used as initial state of the sample of index i in the following batch (default: false). You can set RNN layers to be \"stateful\", which means that the states computed for the samples in one batch will be reused as initial states for the samples in the next batch. This assumes a one-to-one mapping between samples in different successive batches. To enable \"statefulness\": specify stateful: true in the layer constructor. specify a fixed batch size for your model, by passing if sequential model: batchInputShape: [...] to the first layer in your model. else for functional model with 1 or more Input layers: batchShape: [...] to all the first layers in your model. This is the expected shape of your inputs including the batch size. It should be a tuple of integers, e.g., [32, 10, 100]. specify shuffle: false when calling LayersModel.fit(). To reset the state of your model, call resetStates() on either the specific layer or on the entire model.","types":{"types":[],"options":[]}},{"name":"unroll","desc":"If true, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed up a RNN, although it tends to be more memory-intensive. Unrolling is only suitable for short sequences (default: false). Porting Note: tfjs-layers has an imperative backend. RNNs are executed with normal TypeScript control flow. Hence this property is inapplicable and ignored in tfjs-layers.","types":{"types":[],"options":[]}},{"name":"inputDim","desc":"Dimensionality of the input (integer). This option (or alternatively, the option inputShape) is required when this layer is used as the first layer in a model.","types":{"types":["number"],"options":[]}},{"name":"inputLength","desc":"Length of the input sequences, to be specified when it is constant. This argument is required if you are going to connect Flatten then Dense layers upstream (without it, the shape of the dense outputs cannot be computed). Note that if the recurrent layer is not the first layer in your model, you would need to specify the input length at the level of the first layer (e.g., via the inputShape option).","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"simpleRNNCell","parameters":[{"name":"units","desc":"units: Positive integer, dimensionality of the output space.","types":{"types":["number"],"options":[]}},{"name":"activation","desc":"Activation function to use. Default: hyperbolic tangent ('tanh'). If you pass null, 'linear' activation will be applied.","types":{"types":["string"],"options":["elu","hardSigmoid","linear","relu","relu6","selu","sigmoid","softmax","softplus","softsign","tanh","swish","mish","gelu","gelu_new"]}},{"name":"useBias","desc":"Whether the layer uses a bias vector.","types":{"types":[],"options":[]}},{"name":"kernelInitializer","desc":"Initializer for the kernel weights matrix, used for the linear transformation of the inputs.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"recurrentInitializer","desc":"Initializer for the recurrentKernel weights matrix, used for linear transformation of the recurrent state.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"biasInitializer","desc":"Initializer for the bias vector.","types":{"types":["string"],"options":["constant","glorotNormal","glorotUniform","heNormal","heUniform","identity","leCunNormal","leCunUniform","ones","orthogonal","randomNormal","randomUniform","truncatedNormal","varianceScaling","zeros"]}},{"name":"kernelRegularizer","desc":"Regularizer function applied to the kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"recurrentRegularizer","desc":"Regularizer function applied to the recurrent_kernel weights matrix.","types":{"types":["string"],"options":["l1l2"]}},{"name":"biasRegularizer","desc":"Regularizer function applied to the bias vector.","types":{"types":["string"],"options":["l1l2"]}},{"name":"kernelConstraint","desc":"Constraint function applied to the kernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"recurrentConstraint","desc":"Constraint function applied to the recurrentKernel weights matrix.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"biasConstraint","desc":"Constraint function applied to the bias vector.","types":{"types":["string"],"options":["maxNorm","minMaxNorm","nonNeg","unitNorm"]}},{"name":"dropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs.","types":{"types":["number"],"options":[]}},{"name":"recurrentDropout","desc":"Float number between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state.","types":{"types":["number"],"options":[]}},{"name":"dropoutFunc","desc":"This is added for test DI purpose.","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"stackedRNNCells","parameters":[{"name":"cells","desc":"An Array of RNNCell instances.","types":{"types":["[]"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"bidirectional","parameters":[{"name":"layer","desc":"The instance of an RNN layer to be wrapped.","types":{"types":[],"options":[]}},{"name":"mergeMode","desc":"Mode by which outputs of the forward and backward RNNs are combined. If null or undefined, the output will not be combined, they will be returned as an Array. If undefined (i.e., not provided), defaults to 'concat'.","types":{"types":["string"],"options":["sum","mul","concat","ave"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"timeDistributed","parameters":[{"name":"layer","desc":"The layer to be wrapped.","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"inputLayer","parameters":[{"name":"inputShape","desc":"Input shape, not including the batch axis.","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"Optional input batch size (integer or null).","types":{"types":["number"],"options":[]}},{"name":"batchInputShape","desc":"Batch input shape, including the batch axis.","types":{"types":["[]","number","null"],"options":[]}},{"name":"dtype","desc":"Datatype of the input.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"sparse","desc":"Whether the placeholder created is meant to be sparse.","types":{"types":[],"options":[]}},{"name":"name","desc":"Name of the layer.","types":{"types":["string"],"options":[]}}]},{"name":"zeroPadding2d","parameters":[{"name":"padding","desc":"Integer, or Array of 2 integers, or Array of 2 Arrays, each of which is an Array of 2 integers. If integer, the same symmetric padding is applied to width and height. If Array of 2 integers, interpreted as two different symmetric values for height and width: [symmetricHeightPad, symmetricWidthPad]. If Array of 2 Arrays, interpreted as: [[topPad, bottomPad], [leftPad, rightPad]].","types":{"types":["number"],"options":[]}},{"name":"dataFormat","desc":"One of 'channelsLast' (default) and 'channelsFirst'. The ordering of the dimensions in the inputs. channelsLast corresponds to inputs with shape [batch, height, width, channels] while channelsFirst corresponds to inputs with shape [batch, channels, height, width].","types":{"types":["string"],"options":["channelsFirst","channelsLast"]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"alphaDropout","parameters":[{"name":"rate","desc":"drop probability.","types":{"types":["number"],"options":[]}},{"name":"noiseShape","desc":"A 1-D Tensor of type int32, representing the shape for randomly generated keep/drop flags.","types":{"types":["[]","number","null"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"gaussianDropout","parameters":[{"name":"rate","desc":"drop probability.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"gaussianNoise","parameters":[{"name":"stddev","desc":"Standard Deviation.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"masking","parameters":[{"name":"maskValue","desc":"Masking Value. Defaults to 0.0.","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"rescaling","parameters":[{"name":"scale","desc":"","types":{"types":["number"],"options":[]}},{"name":"offset","desc":"","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"centerCrop","parameters":[{"name":"height","desc":"","types":{"types":["number"],"options":[]}},{"name":"width","desc":"","types":{"types":["number"],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"resizing","parameters":[{"name":"height","desc":"","types":{"types":["number"],"options":[]}},{"name":"width","desc":"","types":{"types":["number"],"options":[]}},{"name":"interpolation","desc":"","types":{"types":[],"options":[]}},{"name":"cropToAspectRatio","desc":"","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"categoryEncoding","parameters":[{"name":"numTokens","desc":"","types":{"types":["number"],"options":[]}},{"name":"outputMode","desc":"","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]},{"name":"randomWidth","parameters":[{"name":"factor","desc":"","types":{"types":["number"],"options":[]}},{"name":"interpolation","desc":"","types":{"types":[],"options":[]}},{"name":"seed","desc":"","types":{"types":["number"],"options":[]}},{"name":"autoVectorize","desc":"","types":{"types":[],"options":[]}},{"name":"inputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchInputShape","desc":"If defined, will be used to create an input layer to insert before this layer. If both inputShape and batchInputShape are defined, batchInputShape will be used. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["[]","number","null"],"options":[]}},{"name":"batchSize","desc":"If inputShape is specified and batchInputShape is not specified, batchSize is used to construct the batchInputShape: [batchSize, ...inputShape]","types":{"types":["number"],"options":[]}},{"name":"dtype","desc":"The data-type for this layer. Defaults to 'float32'. This argument is only applicable to input layers (the first layer of a model).","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}},{"name":"name","desc":"Name for this layer.","types":{"types":["string"],"options":[]}},{"name":"trainable","desc":"Whether the weights of this layer are updatable by fit. Defaults to true.","types":{"types":[],"options":[]}},{"name":"weights","desc":"Initial weight values of the layer.","types":{"types":["[]","Tensor"],"options":[]}},{"name":"inputDType","desc":"Legacy support. Do not use for new code.","types":{"types":["string"],"options":["float32","int32","bool","complex64","string"]}}]}]
